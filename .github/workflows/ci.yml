name: CI
on:
  push:
  pull_request:

env:
  BOTCITY_SERVER: ${{ secrets.BOTCITY_SERVER }}
  BOTCITY_KEY: ${{ secrets.BOTCITY_KEY }}
  BOTCITY_LOGIN: ${{ secrets.BOTCITY_LOGIN }}
  BOTCITY_ORGANIZATION: ${{ secrets.BOTCITY_ORGANIZATION }}

  BOT_VERSION: $(git describe --tags $(git rev-list --tags --max-count=1) || if [[ $? -eq 0 ]]; then exit 0; fi)
  BOT_ACTIVITY: ${{ secrets.BOT_ACTIVITY }}
  MACHINE_ID: ${{ secrets.MACHINE_ID }}
  BOT_ID: botDemoCiCd
  BUILD_FILENAME: $(find dist/botDemoCiCd-*)


jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install Bot Dependencies
        run: |
          pip install -r requirements-tests.txt
          pip install -r requirements.txt

      #      - name: Set up Firefox
      #        uses: browser-actions/setup-firefox@latest
      #
      #      - name: Changing gecko-driver permissions
      #        run: sudo chmod 755 botDemoCiCd/resources/geckodriver
      #
      #      - name: Run tests
      #        run: pytest --headless botDemoCiCd
      #
      - name: Building the package
        run: python setup.py sdist

      - name: Downloading BotCLI
        run: curl https://developers.botcity.dev/download/CLI_1.6.zip --output cli.zip

      - name: Unzip file
        run: |
          sudo apt install unzip
          unzip cli.zip
          mv 1.6/* ./

      - name: Echo variables in cli config file.
        run: |
          cat << EOT > config.properties
             organization=${{ env.BOTCITY_ORGANIZATION }}
             workspace=${{ env.BOTCITY_ORGANIZATION }}
             server=${{ env.BOTCITY_SERVER }}
             login=${{ env.BOTCITY_LOGIN }}
             key=${{ env.BOTCITY_KEY }}
          EOT

      - name: Make validations
        run: |
          # verifica se tem alguma tag
          if git describe --tags $(git rev-list --tags --max-count=1) && [[ $? -ne 0 ]]; then
            echo "nao passa"
          else
            repo_version=${{ env.BOT_VERSION }}
            # verifica a a versao ja foi lancada no maestro
            if java -jar botCLI.jar bot list --bid=${{ env.BOT_ID }} | grep "Version: $repo_version" || [[ $? -eq 0 ]]; then
              echo "JÃ¡ foi feito deploy."
              echo "DEPLOYED=1" >> $GITHUB_ENV
            else
              echo "Fazer deploy."
              echo "DEPLOYED=0" >> $GITHUB_ENV
            fi
          fi


      - name: Deploy bot
        if: github.ref == 'refs/heads/cicd-github' && env.DEPLOYED == 0
        run: |
          ls -lha
          echo "fazendo deploy ${{ env.DEPLOYED }} ${{ env.BUILD_FILENAME }}"
        #run: java -jar botCLI.jar bot deploy -version ${{ env.BOT_VERSION }} -botId "botDemoCiCd" -file ${{ env.BUILD_FILENAME }} -python

      - name: Release bot
        if: github.ref == 'refs/heads/cicd-github' || startsWith(github.ref, 'refs/tags') && env.DEPLOYED == 0
        run: echo "release bot"
        #run: java -jar botCLI.jar bot release -botId ${{ env.BOT_ID }} -version ${{ env.BOT_VERSION }}

      - name: Update bot
        if: (github.ref == 'refs/heads/cicd-github' || startsWith(github.ref, 'refs/tags')) && env.DEPLOYED == 1
        run: echo "update bot"
        #run: java -jar botCli.jar bot update -version ${{ env.BOT_VERSION }} -botId ${{ env.BOT_ID }} -file -file ${{ env.BUILD_FILENAME }} -python
















#      - name: Run task
#        if: github.ref == 'refs/heads/cicd-github' # trocar para "main"
#        run: java -jar botCLI.jar task create -activityLabel ${{ env.BOT_ACTIVITY }} -test

#      - name: Downloading BotRunner
#        run: curl https://www.dropbox.com/s/xe45mrnw8mjy3k9/runner.zip?dl=1 --output runner.zip --location
#
#      - name: Unzip file
#        run: |
#          unzip runner.zip
#
#      - name: Echo variables in config file.
#        run: |
#          cat << EOT > conf/conf.bcf
#             server=${{ env.BOTCITY_SERVER }}
#             login=${{ env.BOTCITY_LOGIN }}
#             key=${{ env.BOTCITY_KEY }}
#             machineId=${{ env.MACHINE_ID }}
#             logScreen=false
#             logApplication=false
#          EOT
#
#      - name: Running BotRunner
#        run: java -Dfile.encoding=UTF-8 -jar botrunner-2.4.1.jar -single
